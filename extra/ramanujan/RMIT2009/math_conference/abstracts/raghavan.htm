<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Prof. Raghavan</title>
</head>

<body>

<p><font color="#FF6600"><b>Abstract interpretation: A formal approach for 
analysis and verification of programs</b></font></p>

<p align="justify"><font color="#336799">Abstract interpretation is a widely 
used technique for proving formal properties of programs without actually 
executing them. The essential idea behind this technique is for an analysis 
designer to create an abstraction (approximation) of the semantics of each kind 
of statement in the programming language under consideration, and also an 
abstraction of the state of the program (contents of memory at any time). The 
system then analyzes the program by &quot;interpreting&quot; this abstraction of the 
program, and checks whether the desired property is satisfied by the program. 
There is a rich theory behind abstract interpretation, which gives the 
conditions on the abstraction (provided by the designer) in order for the 
analysis to be correct (i.e., to not declare a property to hold unless it 
actually does) and terminating. In this tutorial we will get a glimpse of the 
techniques and the theory behind abstract interpretation. We will also look at a 
couple concrete approaches that have used abstract interpretation to solve 
interesting problems in program understanding, restructuring, and verification.</font></p>

</body>

</html>